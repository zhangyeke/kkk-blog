// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  // output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id         Int          @id @default(autoincrement())
  category   PostCategory @relation(fields: [categoryId], references: [id])
  categoryId Int
  pv         Int          @default(0)
  cover      String
  tags       String
  title      String
  content    String
  status     Int          @default(1)
  userId     String       @db.Uuid
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime     @default(now()) @db.Timestamp(6)
}

model PostCategory {
  id        Int      @id @default(autoincrement())
  name      String
  icon      String?
  status    Int      @default(1)
  posts     Post[]
  createdAt DateTime @default(now()) @db.Timestamp(6)
}

// 用户表
model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime? @default(now()) @db.Timestamp(6)
  avatar        String?
  password      String?
  roles         String    @default("user")
  address       Json?     @db.Json

  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt
  accounts   Account[]
  session   Session[]
  posts      Post[]
}

// 第三方登录账户
model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// 会话令牌
model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
